#!/usr/bin/ucblogo

;; Copyright 2012 Kevin Ryde
;;
;; This file is part of Math-PlanePath.
;;
;; Math-PlanePath is free software; you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the Free
;; Software Foundation; either version 3, or (at your option) any later
;; version.
;;
;; Math-PlanePath is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
;; for more details.
;;
;; You should have received a copy of the GNU General Public License along
;; with Math-PlanePath.  If not, see <http://www.gnu.org/licenses/>.


;;------------------------------------------------------------------------------

; For :n = binary "...z100..00" return the "z" bit z000..00.
; Eg. n=22 is binary 10110 the lowest 1-bit is the "...1." and the return is
; bit above that "..1.," which is 4.
to bit.above.lowest.1bit :n
  output bitand :n (1 + (bitxor :n (:n - 1)))
end

; Return angle +90 or -90 for dragon curve turn at point :n.
; The curve is taken to start at n=0 so the first turn is at n=1.
to dragon.turn.angle :n
  output ifelse (bit.above.lowest.1bit :n)=0 [90] [-90]
end

; Draw :steps many segments of the dragon curve.
to dragon :steps
  localmake "step.len 12  ; length of each step
  repeat :steps [ forward :step.len
                  left    dragon.turn.angle repcount ]
end

; Draw :steps many segments of the dragon curve, with corners chamfered
; off with  little 45-degree diagonals  Done this way the vertices don't touch.
to dragon.chamfer :steps
  localmake "step.len       12  ; length of each step
  localmake "straight.frac  0.5 ; fraction of the step to go straight

  localmake "straight.len   :step.len * :straight.frac
  localmake "diagonal.len   (:step.len - :straight.len) * sqrt(1/2)
  repeat :steps [
     localmake "turn  (dragon.turn.angle repcount)/2   ; +45 or -45
     forward :straight.len
     left    :turn
     forward :diagonal.len
     left    :turn
  ]
end

;;------------------------------------------------------------------------------

; or parameter for left/right side and negative angle for backward arc
to arc.turn :angle :radius
  localmake "rightangle ifelse :angle>0 [90] [-90]
  right :rightangle
  penup
  forward :radius
  pendown
  right 180    ; pointing towards original position

  arc :angle :radius
  
  right :angle   ; pointing towards end of arc
  penup
  forward :radius
  pendown
  right :rightangle
end

to dragon.arcs :steps
  localmake "step.radius   12
  repeat :steps [
     arc.turn (- dragon.turn.angle repcount) :step.radius
  ]
end

; dragon.arcs 512
; forward 100
; arc.turn 45 100
; wait 60
 dragon 256
; wait 60
; clearscreen
; dragon.chamfer 256



     ; penup 
     ; forward 10
     ; left    dragon.turn.angle repcount
     ; forward 10
     ; pendown
     ; arc 90 10

; epspict "/tmp/x.eps

; do.while
; .setfirst
; .maybeoutput
; * + - /
; < 
; <=
; <>
; =
; >
; >=
; `
; refresh
; .SETSEGMENTSIZE
; /so/logo/ucblogo-6.0/csls/

; to sgn :x
;   output ifelse (:x > 0) [1] [-1]
; end

